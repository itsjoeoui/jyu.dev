---
import { Marked } from "marked";
import { markedHighlight } from "marked-highlight";
import hljs from "highlight.js";
export const prerender = true;
import type { SanityDocument } from "@sanity/client";
import { sanityClient } from "sanity:client";
// import { PortableText } from "astro-portabletext";
// import { marked } from "marked";

const POST_QUERY = `*[_type == "post" && slug.current == $slug][0]`;
const post = await sanityClient.fetch<SanityDocument>(POST_QUERY, Astro.params);
import type { InferGetStaticPropsType } from "astro";

import PostLayout from "@/layouts/BlogPost.astro";

export async function getStaticPaths(): Promise<{ params: { slug: string } }> {
  const SLUGS_QUERY = `*[_type == "post" && defined(slug.current)]{
    "params": {"slug": slug.current}
  }`;
  return await sanityClient.fetch(SLUGS_QUERY, Astro.params);
}
const marked = new Marked(
  markedHighlight({
    emptyLangClass: "hljs",
    langPrefix: "hljs language-",
    highlight(code, lang, info) {
      const language = hljs.getLanguage(lang) ? lang : "plaintext";
      return hljs.highlight(code, { language }).value;
    },
  }),
);

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

// const { entry } = Astro.props;
// const { Content } = await entry.render();
const content = marked.parse(post.markdown);
---

<PostLayout post={post}>
  <!-- {Array.isArray(post.body) && <PortableText value={post.body} />} -->
  <article set:html={content} />
</PostLayout>
